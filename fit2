#Polynomial fits

degree = {}
deg_1 = 1  
deg_2 = 2  
deg_3 = 10 

degree[0], degree[1], degree[2] = deg_1, deg_2, deg_3

max_degree = max(degree.values())
y = torch.from_numpy(t)
X_full = torch.ones((y.shape[0], max_degree + 1), dtype=torch.float64) 
for i in range(max_degree):
    X_full[:,i] =  torch.from_numpy(x) ** (max_degree - i)

theta_collection = {}

for i in range(3):
    X = X_full[:,-(degree[i] + 1):]
    temp_inverse = torch.inverse(torch.einsum('ij,jk->ik', X.t(), X)) 
    theta_collection[i] = torch.einsum('ij,jk,k->i', temp_inverse, X.t(), y)

fig = make_subplots(
    rows=1, cols=3,
    subplot_titles=(f"poly{degree[0]} fit", f"poly{degree[1]} fit", f"poly{degree[2]} fit"))

x_funcs = np.arange(0,1,1./100)
y_funcs = {}
for i in range(3):
    theta_funcs = theta_collection[i].numpy()
    X_funcs = np.ones((x_funcs.shape[0], degree[i] + 1), dtype=np.float64)
    for j in range(degree[i]):
        X_funcs[:,j] =  x_funcs ** (degree[i] - j)
    y_funcs[i] = np.einsum('ij,j->i', X_funcs, theta_funcs)
    coefficients_string = '<br><br><br>' + '<br>'.join([c + f': {np.round(theta_funcs[i], decimals=2)}' for i, c in enumerate('abcdefghijklmnopqrstuvwxyz'[:len(theta_funcs)])])

    fig.add_trace(go.Scatter(x=x, y=t, mode='markers', marker=dict(color="mediumpurple")), row=1, col=i + 1)
    fig.add_trace(go.Scatter(x=x_funcs, y=np.sin(2*np.pi*x_funcs), mode='lines', line=dict(color="lightgreen")), row=1, col=i + 1)
    fig.add_trace(go.Scatter(x=x_funcs, y=y_funcs[i], mode='lines', line=dict(color="lightsalmon")), row=1, col=i + 1)
    fig.update_xaxes(title_text="x" + coefficients_string, range = [0,1], row=1, col=i+1)

fig.update_layout(showlegend=False)
fig.update_yaxes(title_text="t", range = [-5,5])
fig.update_layout(height=700, width=1300, title_text="Polynomial fits and their coefficients")
fig.show()
